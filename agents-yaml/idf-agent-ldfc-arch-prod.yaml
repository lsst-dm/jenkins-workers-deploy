apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: idf-agent-ldfc-arch64
  namespace: default
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  podManagementPolicy: Parallel
  replicas: 6
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: idf-agent-ldfc-arch64
  serviceName: ""
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: idf-agent-ldfc-arch64
    spec:
      nodeSelector:
        failure-domain.beta.kubernetes.io/zone: us-central1-a
      containers:
      - args:
        - --host=tcp://localhost:2375
        - --mtu=1376
        command:
        - /usr/local/bin/dockerd
        env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        image: docker:27.1.1-dind
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - wget
            - --spider
            - -q
            - http://localhost:2375/_ping
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: dind
        readinessProbe:
          exec:
            command:
            - wget
            - --spider
            - -q
            - http://localhost:2375/_ping
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "12"
            memory: 64Gi
          requests:
            cpu: "12"
            memory: 64Gi
        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/lib/docker
          name: docker-graph-storage
        - mountPath: /j
          name: volume-arm
      - command:
        - sh
        - -c
        - while true; do /usr/local/bin/docker-gc; sleep $GRACE_PERIOD_SECONDS; done
        env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        - name: GRACE_PERIOD_SECONDS
          value: "3600"
        - name: MINIMUM_IMAGES_TO_SAVE
          value: "5"
        - name: REMOVE_VOLUMES
          value: "1"
        - name: FORCE_CONTAINER_REMOVAL
          value: "1"
        - name: FORCE_IMAGE_REMOVAL
          value: "1"
        image: ghcr.io/lsst-dm/docker-docker-gc:latest
        imagePullPolicy: Always
        name: docker-gc
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: true
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - env:
        - name: JAVA_ARGS
          value: -javaagent:/usr/share/jenkins/jmx_prometheus_javaagent-0.11.0.jar=localhost:8080:/usr/share/jenkins/jmx_exporter.yaml
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        - name: JSWARM_URL
          value: https://rubin-ci.slac.stanford.edu/
        - name: JSWARM_TUNNEL
          value: 134.79.23.234:20000
        - name: JSWARM_MODE
          value: normal
        - name: JSWARM_LABELS
          value: arm64
        - name: JSWARM_EXECUTORS
          value: "1"
        - name: JSWARM_AGENT_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: JSWARM_DISABLE_CLIENTS_UNIQUE_ID
          value: "true"
        - name: JSWARM_DELETE_EXISTING_CLIENTS
          value: "true"
        - name: JSWARM_USERNAME
          valueFrom:
            secretKeyRef:
              key: JSWARM_USERNAME
              name: agent-ldfc
        - name: JSWARM_PASSWORD
          valueFrom:
            secretKeyRef:
              key: JSWARM_PASSWORD
              name: agent-ldfc
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: K8S_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: K8S_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: K8S_SWARM_REQUESTS_CPU
          valueFrom:
            resourceFieldRef:
              containerName: swarm
              divisor: "0"
              resource: requests.cpu
        - name: K8S_SWARM_LIMITS_CPU
          valueFrom:
            resourceFieldRef:
              containerName: swarm
              divisor: "0"
              resource: limits.cpu
        - name: K8S_SWARM_REQUESTS_MEMORY_GI
          valueFrom:
            resourceFieldRef:
              containerName: swarm
              divisor: 1Gi
              resource: requests.memory
        - name: K8S_SWARM_LIMITS_MEMORY_GI
          valueFrom:
            resourceFieldRef:
              containerName: swarm
              divisor: 1Gi
              resource: limits.memory
        - name: K8S_DIND_REQUESTS_CPU
          valueFrom:
            resourceFieldRef:
              containerName: dind
              divisor: "0"
              resource: requests.cpu
        - name: K8S_DIND_LIMITS_CPU
          valueFrom:
            resourceFieldRef:
              containerName: dind
              divisor: "0"
              resource: limits.cpu
        - name: K8S_DIND_REQUESTS_MEMORY_GI
          valueFrom:
            resourceFieldRef:
              containerName: dind
              divisor: 1Gi
              resource: requests.memory
        - name: K8S_DIND_LIMITS_MEMORY_GI
          valueFrom:
            resourceFieldRef:
              containerName: dind
              divisor: 1Gi
              resource: limits.memory
        - name: K8S_DOCKER_GC_REQUESTS_CPU_M
          valueFrom:
            resourceFieldRef:
              containerName: docker-gc
              divisor: 1m
              resource: requests.cpu
        - name: K8S_DOCKER_GC_LIMITS_CPU_M
          valueFrom:
            resourceFieldRef:
              containerName: docker-gc
              divisor: 1m
              resource: limits.cpu
        - name: K8S_DOCKER_GC_REQUESTS_MEMORY_MI
          valueFrom:
            resourceFieldRef:
              containerName: docker-gc
              divisor: 1Mi
              resource: requests.memory
        - name: K8S_DOCKER_GC_LIMITS_MEMORY_MI
          valueFrom:
            resourceFieldRef:
              containerName: docker-gc
              divisor: 1Mi
              resource: limits.memory
        image: ghcr.io/lsst-dm/docker-jenkins-swarm-client:latest
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - wget
            - --spider
            - -q
            - http://127.0.0.1:8080/metrics
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: swarm
        readinessProbe:
          exec:
            command:
            - wget
            - --spider
            - -q
            - http://127.0.0.1:8080/metrics
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 750m
            memory: 2Gi
          requests:
            cpu: 750m
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: true
          privileged: false
          readOnlyRootFilesystem: false
          runAsGroup: 202
          runAsNonRoot: false
          runAsUser: 48435
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /j
          name: volume-arm
      dnsPolicy: ClusterFirst
      nodeSelector:
        cloud.google.com/gke-nodepool: jenkins-workers-multiarch
        kubernetes.io/arch: arm64
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 4085
        runAsGroup: 0
        runAsNonRoot: false
        runAsUser: 0
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: docker-graph-storage
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: volume-arm
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1500Gi
        storageClassName: arm-volume
        volumeMode: Filesystem
